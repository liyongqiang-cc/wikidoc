import{_ as s,c as e,a as t,o as a}from"./app-BMGf1kKn.js";const l={};function d(n,i){return a(),e("div",null,i[0]||(i[0]=[t(`<p><em><strong>Git Commit Message</strong></em> 规范在现在的团队多人协作开发中越来越重要，已经成为一种新的标准实践。尤其是在一些大型项目和追求高质量和可维护性的项目中。遵循一定的规范，能为我们带了很多好处。比如：</p><ul><li>按照规范的提交信息有助于确保每个提交的信息都是清晰且一致的，使得其他开发者能够迅速理解提交的目的和影响。</li><li>统一的格式让提交信息更易于阅读，特别是在查看提交历史或使用自动化工具生成变更日志时。</li><li>使用特定的类型（如 feat, fix, docs）可以传达提交的性质，帮助团队识别哪些是新功能，哪些是修复，哪些是文档更新等。</li><li>清晰的提交信息减少了需要额外沟通的情况，因为大部分信息都可以从提交记录中直接获取。</li></ul><p>需要注意的是，规范化同时也会带给我们一些缺点，请在权衡利弊下使用。</p><ul><li>对于新加入团队的同事来说，需要一定的时间，来学习相关提交规范。</li><li>过度规范的提交格式，对于一些简短的描述解可以解决的提交，或者小型紧急的修复优化可能是一种新的负担。</li><li>全部统一提交规范可能需要额外的工具或脚本来验证提交信息的格式，或者需要有人能有review提交信息。这增加了维护成本。</li></ul><h2 id="整体示例" tabindex="-1"><a class="header-anchor" href="#整体示例"><span>整体示例</span></a></h2><p>在这里我提供一种比较常见、简洁的提交规范。能帮我们快速获取提交信息，又不需要花费太多的维护和学习成本。</p><ol><li>整体提交格式</li></ol><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TYPE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">相关需求或者BUG编号</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">修改或者新增模块-具体操作</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如:</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[fix]:[BUG_20201205_01][用户列表-修复搜索错误]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>无编号情况</li></ol><p>当我们的一写紧急BUG或者需求没有相关编号时，我们可以直接省略编号，只保留<code>[]</code>符号。</p><p>例如：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[fix]:[][用户列表-修复搜索错误]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[feat]:[][用户列表-添加地址信息]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>全局修改情况</li></ol><p>在修改全局方法或者样式时，没有具体的模块。在添加提交信息时我们可以直接省略掉具体模块或者添加为<code>全局方法</code>、<code>全局样式</code>等。</p><p>例如：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[feat]:[BUG_20201205_01][文档导出]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[style]:[][全局样式-顶部导航栏调整]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>多个模块功能情况</li></ol><p>我们有时候一次提交，修改了多个功能和模块，我们需要使用<code>&amp;</code>链接多个提交信息。</p><p>例如：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[feat]:[BUG_20201205_01][文档导出]&amp;[style]:[][全局样式-顶部导航栏调整]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="type-类型" tabindex="-1"><a class="header-anchor" href="#type-类型"><span>TYPE 类型</span></a></h2><p>这里只列举了一些前端开发中常用的<code>type</code>列表。</p><table><thead><tr><th>TYPE类型</th><th>释义</th><th>示例</th></tr></thead><tbody><tr><td><code>init</code></td><td>项目初始化</td><td><code>[init]:[][XX项目初始化]</code></td></tr><tr><td><code>feat</code></td><td>添加或优化新功能</td><td><code>[feat]:[Feat_20221001_01][新增角色添加功能-页面开发]</code></td></tr><tr><td><code>fix</code></td><td>修复BUG相关</td><td><code>[fix]:[BUG_20221001_01][角色列表-新增角色修复]</code></td></tr><tr><td><code>refactor</code></td><td>代码重构</td><td><code>[refactor]:[][全局方法-文档导出优化]</code></td></tr><tr><td><code>style</code></td><td>样式改动</td><td><code>[style]:[][全局样式-全局主题色调整]</code></td></tr><tr><td><code>docs</code></td><td>文档更改</td><td><code>[docs]:[][README修改]</code></td></tr><tr><td><code>build</code></td><td>构建相关的更改</td><td><code>[build]:[][构建配置修改]</code></td></tr></tbody></table>`,25)]))}const p=s(l,[["render",d],["__file","index.html.vue"]]),r=JSON.parse(`{"path":"/Git/zx31phxv/","title":"Git Commit Message规范","lang":"zh-CN","frontmatter":{"title":"Git Commit Message规范","author":"WIKIDOC","createTime":"2024/05/16 17:32:38","permalink":"/Git/zx31phxv/","description":"Git Commit Message 规范在现在的团队多人协作开发中越来越重要，已经成为一种新的标准实践。尤其是在一些大型项目和追求高质量和可维护性的项目中。遵循一定的规范，能为我们带了很多好处。比如： 按照规范的提交信息有助于确保每个提交的信息都是清晰且一致的，使得其他开发者能够迅速理解提交的目的和影响。 统一的格式让提交信息更易于阅读，特别是在查看...","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"],["meta",{"property":"og:url","content":"https://www.xxx.cn/Git/zx31phxv/"}],["meta",{"property":"og:site_name","content":"WIKIDOC笔记"}],["meta",{"property":"og:title","content":"Git Commit Message规范"}],["meta",{"property":"og:description","content":"Git Commit Message 规范在现在的团队多人协作开发中越来越重要，已经成为一种新的标准实践。尤其是在一些大型项目和追求高质量和可维护性的项目中。遵循一定的规范，能为我们带了很多好处。比如： 按照规范的提交信息有助于确保每个提交的信息都是清晰且一致的，使得其他开发者能够迅速理解提交的目的和影响。 统一的格式让提交信息更易于阅读，特别是在查看..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T06:08:33.000Z"}],["meta",{"property":"article:author","content":"WIKIDOC"}],["meta",{"property":"article:modified_time","content":"2024-09-11T06:08:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git Commit Message规范\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-11T06:08:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WIKIDOC\\"}]}"]]},"headers":[{"level":2,"title":"整体示例","slug":"整体示例","link":"#整体示例","children":[]},{"level":2,"title":"TYPE 类型","slug":"type-类型","link":"#type-类型","children":[]}],"readingTime":{"minutes":2.98,"words":893},"git":{"createdTime":1726034913000,"updatedTime":1726034913000,"contributors":[{"name":"hardy","email":"WikiFX@DESKTOP-Q1VUAS6","commits":1}]},"autoDesc":true,"filePathRelative":"notes/Git/Git Commit Message规范.md"}`);export{p as comp,r as data};
