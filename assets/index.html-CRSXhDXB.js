import{_ as i,c as a,a as e,o as l}from"./app-D-BlpuhZ.js";const n={};function h(t,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象。这些模式被用于<code>RegExp</code>的 <code>exec</code>和 <code>text</code>方法，以及<code>String</code>中的 <code>match</code>、<code>matchAll</code>、<code>replace</code>、<code>search</code>和<code>split</code>方法</p><h2 id="创建表达式" tabindex="-1"><a class="header-anchor" href="#创建表达式"><span>创建表达式</span></a></h2><p><strong>字面量</strong></p><p>使用两个 <code>/</code> 直接创建正则表达，已斜杠表示开始和结束</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">ab</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当脚本加载后，正则表达式字面量就会被编译。当正则表达式保存不变时，使用此方法可获得更好的性能。</p><p><code>RegExp</code><strong>构造函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RegRxp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ab</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">g</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 等价于   var reg = /ab/g</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>字面量创建斜杠结束后面参数和构造函数第二个参数表示修饰符。</p><p>上面两种写法是等加价的都新建了一个在正则表达式对象。区别在于，第一种再引擎编译代码时，就会新建正则表达式。第二种方法在运行时新建表达式，所以字面量效率更高。并且字面量比较便利直观，基本上都会采用字面量定义正则表达式。</p><h2 id="实例属性" tabindex="-1"><a class="header-anchor" href="#实例属性"><span>实例属性</span></a></h2><p>正则修饰符相关实例属性（只读）</p><ul><li><code>ignoreCase</code>：返回布尔值，表示是否设置了<code>i</code>修饰符</li><li><code>global</code>：返回布尔值，表示是否设置了<code>g</code>修饰符</li><li><code>multiline</code>：返回布尔值，表示是否设置了<code>m</code>修饰符</li><li><code>flags</code>：返回一个字符串，包含设置的所有修饰符</li></ul><p>与修饰符无关实力属性：</p><ul><li><code>lastIndex</code>：返回一个证书，表示下一次开始搜索的位置</li><li><code>source</code>：返回正则表达式的字符串形式，只读</li></ul><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">abc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">gim</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//修饰符相关属性</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ignoreCase</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">global</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">multiline</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">flags</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //gim</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//修饰符无关属性</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lastIndex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //0</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">source</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //abc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法"><span>实例方法</span></a></h2><h3 id="正则实例方法" tabindex="-1"><a class="header-anchor" href="#正则实例方法"><span>正则实例方法</span></a></h3><p><code>test()</code></p><p>在字符串中测试是否匹配，返回值味 <code>true</code>或 <code>false</code></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">av</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">avbabc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lastIndex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当正则表达式带有<code>g</code>修饰符时，每一次<code>test</code>方法都会从上一次结束的位置开始向后匹配，可以使用<code>lastIndex</code>查看当前位置</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">av</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">avbavabc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lastIndex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //0</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lastIndex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //2</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lastIndex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //5</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果正则表达式是一个空字符串，则匹配所有的字符串，都返回<code>true</code></p><p><code>exec()</code></p><p>在字符串中执行查找匹配的字符，返回一个数组，未匹配到返回<code>null</code><code>exec</code>方法返回数组包含两个属性：</p><ul><li><code>input</code>：整个原字符串</li><li><code>index</code>：模式匹配成功的开始位置索引</li></ul><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">av</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">avbavabc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">exec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //[&quot;av&quot;, index: 0, input: &quot;avbavabc&quot;, groups: undefined]</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">exec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //[&quot;av&quot;, index: 3, input: &quot;avbavabc&quot;, groups: undefined]</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">exec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同 test 一样，当正则表达式带有<code>g</code>修饰符时，每一次<code>exec</code>方法都会从上一次结束的位置开始向后匹配，可以使用<code>lastIndex</code>查看当前位置</p><p>当正则表达式包含<code>()</code>组匹配时，返回的数组包含多个匹配数据，第一个是整个正则匹配成功的结果，第二个为括号内的匹配结果，如果有多个括号，第三个为第二个括号内的匹配内容。依次类推。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">v</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">avbavabc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">exec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //[ &#39;av&#39;, &#39;v&#39;, index: 0, input: &#39;avbavabc&#39;, groups: undefined ]</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">exec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //[ &#39;av&#39;, &#39;v&#39;, index: 3, input: &#39;avbavabc&#39;, groups: undefined ]</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">exec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个<code>()</code></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">v</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)(</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">avbavabc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">exec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // [ &#39;avb&#39;, &#39;v&#39;, &#39;b&#39;, index: 0, input: &#39;avbavabc&#39;, groups: undefined ]</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">exec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-实例方法" tabindex="-1"><a class="header-anchor" href="#string-实例方法"><span>String 实例方法</span></a></h3><p><code>match()</code></p><p>在字符串中执行查找匹配的字符，返回一个数组，未匹配到返回<code>null</code> 当正则表达式不带有<code>g</code>修饰符是，返回的数组带有<code>index</code>和<code>iuput</code>属性</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">ac</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">acbacvabc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">aabaavabc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">match</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //[ &#39;ac&#39;, index: 0, input: &#39;acbacvabc&#39;, groups: undefined ]</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">match</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正则表达式带有<code>g</code>修饰符时，该方法会一次性返回所有匹配成功的结果数组。不再带有<code>index</code>和<code>input</code>属性</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">ac</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">acbacvabc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">match</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //[ &#39;ac&#39;, &#39;ac&#39; ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：设置正则表达式的<code>lastindex</code>属性对<code>match</code>方法无效，<code>match</code>方法总是从字符串第一个开始匹配。</p><p><strong><code>matchAll()</code></strong></p><p>在字符串中执行查找所有匹配的字符，返回一个迭代器。注意 ，在使用<code>matchAll</code>时，正则表达式需要带有<code>g</code>修饰符，否则会运行报错。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">acbacvabc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">arr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [...</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">matchAll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)];</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">arr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//输出：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">[</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  [ &#39;a&#39;, index: 0, input: &#39;acbacvabc&#39;, groups: undefined ],</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  [ &#39;a&#39;, index: 3, input: &#39;acbacvabc&#39;, groups: undefined ],</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  [ &#39;a&#39;, index: 6, input: &#39;acbacvabc&#39;, groups: undefined ]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">**/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>search()</code></p><p>在字符串中执行查找匹配的字符，返回第一个匹配到字符的位置，未匹配到返回-1</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">en</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reg1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">yo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">yuwenbo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">search</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //3</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">search</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reg1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //-1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>replace()</code></p><p>在字符串中执行查找匹配的字符，并且使用替换字符串替换匹配到的子字符串。两个参数一个是正则表达式，一个是需要替换的内容。</p><p>如果正则没有<code>g</code>修饰符，只替换第一个匹配成功的值。如果有<code>g</code>修饰符，则替换所有匹配成功的值。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">i love you</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">replace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#5A6AA6;--shiki-dark:#6872AB;">\\s</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">❤</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //i❤love you</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">replace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#5A6AA6;--shiki-dark:#6872AB;">\\s</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">❤</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //i❤love❤you</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>replace</code>第二个参数可以使用<code>$</code>符号，用来更加方便的制定所替换的内容</p><ul><li><code>$&amp;</code>：匹配的子字符串</li><li>\`$\`\`：匹配结果前面的文本</li><li><code>$&#39;</code>：匹配结果后面的文本</li><li><code>$n</code>：匹配成功的第 n 组内容，n 是从 1 开始的自然数</li><li><code>$$</code>：指代美元符号<code>$</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">he llo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">replace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#5A6AA6;--shiki-dark:#6872AB;">\\w</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#5A6AA6;--shiki-dark:#6872AB;">\\s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#5A6AA6;--shiki-dark:#6872AB;">\\w</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$2 $1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //llo he</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">replace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">e</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-$\`-$&amp;-$&#39;-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //h-h-e-llo-llo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>replace</code>的第二个参数也可以作为一个函数，将每一个正则匹配内容替换为函数的返回值</p><p>函数可以接受多个参数，第一个为匹配到的内容，后面为组匹配内容(可以有多个组匹配)，倒数第二个参数为匹配内容再字符串中的位置，倒数第一个参数为原字符串。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">replace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">e</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">match</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> index</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">match</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> index</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">❤</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//e 1 hello</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//h❤llo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>split()</code></p><p>使用正则表达式或者一个固定字符串分割一个字符串，并将分割后的子字符串存储到数组中 该方法可接受两个参数，第一个参数为正则表达式，表示分割规则，第二个参数是返回数组的最大成员数</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ni hao ya.hei hei hei</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">split</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#BDA437;--shiki-dark:#E6CC77;">\\.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //[ &#39;ni&#39;, &#39;hao&#39;, &#39;ya&#39;, &#39;hei&#39;, &#39;hei&#39; ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结：</strong></p><p>判断字符串是否被匹配到，使用<code>test</code>或者<code>search</code>方法 想获得更多的信息，使用<code>exec</code>或者，<code>match</code>方法，会比较慢。</p><h2 id="修饰符-标志符" tabindex="-1"><a class="header-anchor" href="#修饰符-标志符"><span>修饰符（标志符）</span></a></h2><p>修饰符表示附加规则，放在正则模式的最尾部。可以单个使用，也可以一起使用。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//单个修饰符</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">abAbab</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">match</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">g</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //[&quot;a&quot;,&quot;a&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//多个修饰符一起使用</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">abAbab</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">match</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">gi</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //[&quot;a&quot;, &quot;A&quot;, &quot;a&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="g修饰符" tabindex="-1"><a class="header-anchor" href="#g修饰符"><span><code>g</code>修饰符</span></a></h3><blockquote><p>全局搜索，默认情况下只匹配一次，就停止像下匹配了，加上修饰符会一直向下搜索</p></blockquote><h3 id="i修饰符" tabindex="-1"><a class="header-anchor" href="#i修饰符"><span><code>i</code>修饰符</span></a></h3><blockquote><p>默认情况下会区分匹配字符串的大小写情况</p></blockquote><h3 id="m修饰符" tabindex="-1"><a class="header-anchor" href="#m修饰符"><span><code>m</code>修饰符</span></a></h3><blockquote><p>多行搜索，多行模式，会修改<code>^</code>和<code>$</code>的行为 默认情况下，<code>^</code>和<code>$</code>匹配字符串的开始处和结尾处 加上<code>m</code>修饰符，<code>^</code>和<code>$</code>还会匹配行首和行尾，即<code>^</code>和<code>$</code>会识别换行符<code>\\n</code></p></blockquote><p>例如：</p><ul><li><code>/yewen$/m.test(&#39;hi yuwen\\n&#39;)</code> 为<code>true</code></li><li><code>/yewen$/.test(&#39;hi yuwen\\n&#39;)</code> 为<code>false</code></li></ul><h3 id="s修饰符" tabindex="-1"><a class="header-anchor" href="#s修饰符"><span><code>s</code>修饰符</span></a></h3><blockquote><p>允许<code>.</code>匹配换行符</p></blockquote><h3 id="u修饰符" tabindex="-1"><a class="header-anchor" href="#u修饰符"><span><code>u</code>修饰符</span></a></h3><blockquote><p>使用<code>unicode</code>码的模式进行匹配</p></blockquote><h3 id="y修饰符" tabindex="-1"><a class="header-anchor" href="#y修饰符"><span><code>y</code>修饰符</span></a></h3><blockquote><p>执行 粘性搜索匹配从目标字符串的当前位置开始</p></blockquote><h2 id="特殊字符" tabindex="-1"><a class="header-anchor" href="#特殊字符"><span>特殊字符</span></a></h2><h3 id="字符" tabindex="-1"><a class="header-anchor" href="#字符"><span><code>\\</code>字符</span></a></h3><blockquote><p>转义字符 正则表达式中需要匹配特殊字符本身，需要再前面家反斜杠<code>\\</code> 正则表达式中，需要反斜杠转义的：<code>^</code>,<code>.</code>,<code>[</code>,<code>$</code>,<code>(</code>,<code>)</code>,<code>|</code>,<code>*</code>,<code>+</code>,<code>?</code>,<code>{</code>,<code>\\</code></p></blockquote><h3 id="字符-1" tabindex="-1"><a class="header-anchor" href="#字符-1"><span><code>^</code>字符</span></a></h3><blockquote><p>匹配开始位置 如果设置多行标志，那么也匹配换行符后的位置</p></blockquote><p>例如：<code>/^A/</code>会匹配 <code>&quot;Ant&quot;</code>中的<code>A</code>，但是不会匹配<code>&quot;ntA&quot;</code>中的<code>A</code></p><h3 id="字符-2" tabindex="-1"><a class="header-anchor" href="#字符-2"><span><code>$</code>字符</span></a></h3><blockquote><p>匹配结束位置 如果设置多行标志，那么也匹配换行符前的位置</p></blockquote><p>例如：<code>/A$/</code>会匹配 <code>&quot;ntA&quot;</code>中的<code>A</code>，但是不会匹配<code>&quot;Ant&quot;</code>中的<code>A</code></p><h3 id="字符-3" tabindex="-1"><a class="header-anchor" href="#字符-3"><span><code>*</code>字符</span></a></h3><blockquote><p>匹配一个表达式 0 次或多次 等价于 <code>{0, }</code></p></blockquote><p>例如：<code>/yueno*/</code>会匹配 <code>&quot;yuenoooyuen&quot;</code>中的<code>yuenooo</code>和<code>yuen</code></p><h3 id="字符-4" tabindex="-1"><a class="header-anchor" href="#字符-4"><span><code>+</code>字符</span></a></h3><blockquote><p>匹配一个表达式 1 次或多次 等价于 <code>{1, }</code></p></blockquote><p>例如：<code>/yueno+/</code>只会匹配 <code>&quot;yuenoooyuen&quot;</code>中的<code>yuenooo</code></p><h3 id="字符-5" tabindex="-1"><a class="header-anchor" href="#字符-5"><span><code>?</code>字符</span></a></h3><blockquote><p>匹配一个表达式 0 次或 1 次 等价于 <code>{0, 1}</code></p></blockquote><ul><li>例如：<code>/yueno?/</code>只会匹配 <code>&quot;yuenoooyuen&quot;</code>中的<code>yueno</code></li><li>注意：<code>?</code>如果紧跟再任何量词 <code>*</code>、<code>+</code>、<code>?</code>或<code>{}</code>的后面，将会使量词变得非贪婪（匹配尽量少的字符）</li><li>例如：<code>/yueno??/</code>只会匹配 <code>&quot;yuenoooyuen&quot;</code>中的<code>yuen</code></li></ul><h3 id="字符-6" tabindex="-1"><a class="header-anchor" href="#字符-6"><span><code>.</code>字符</span></a></h3><blockquote><p>默认匹配出换行符之外的任何单个字符</p></blockquote><ul><li>例如：<code>/.y/</code>只会匹配 <code>&quot;yuenoooyuen&quot;</code>中的<code>oy</code></li><li>例如：<code>/..y/</code>只会匹配 <code>&quot;yuenoooyuen&quot;</code>中的<code>ooy</code></li></ul><h3 id="x-字符" tabindex="-1"><a class="header-anchor" href="#x-字符"><span><code>(x)</code>字符</span></a></h3><blockquote><p>捕获括号 正则表达式中的括号表示分组匹配，括号中的模式可以用匹配分组的内容 分组匹配可以使用<code>\\n</code> 正则替换中，可以使用<code>$1</code>,<code>$2</code>语法</p></blockquote><ul><li>例如：<code>/(wenbo)+/.test(&#39;wenbowenbo&#39;)</code> 为<code>true</code>，表示匹配<code>wenbo</code>整体一次或多次</li><li>例如：<code>&quot;wenbo,zhijian&quot;.replace(/(wenbo),(zhijian)/, &#39;$2,$1&#39;)</code></li><li>输出：<code>zhijian,wenbo</code></li></ul><h3 id="x-字符-1" tabindex="-1"><a class="header-anchor" href="#x-字符-1"><span><code>(?=x)</code>字符</span></a></h3><blockquote><p>匹配<code>X</code>但是不记住匹配项 非捕获括号，使你能够定义与正则表达式运算符一起使用的子表达式 使用非捕获括号，能匹配元素，但是不能在使用<code>\\n</code>和<code>$n</code>方法</p></blockquote><h3 id="x-y-字符" tabindex="-1"><a class="header-anchor" href="#x-y-字符"><span><code>x(?=y)</code>字符</span></a></h3><blockquote><p>匹配&gt; <code>x</code>，仅仅当&gt; <code>x</code>后面是&gt; <code>y</code>&gt; ，先行断言</p></blockquote><ul><li>例如：<code>&#39;wenbo&#39;.match(/wen(?=bo)/)</code></li><li>输出：<code>[ &#39;wen&#39;, index: 0, input: &#39;wenbo&#39;, groups: undefined ]</code></li><li>例如：<code>&#39;wenyu&#39;.match(/wen(?=bo)/)</code></li><li>输出：null</li></ul><h3 id="y-x字符" tabindex="-1"><a class="header-anchor" href="#y-x字符"><span><code>(?&lt;=y)x</code>字符</span></a></h3><blockquote><p>匹配&gt; <code>x</code>，仅仅当&gt; <code>x</code>前面是&gt; <code>y</code> ，&gt; 后行断言</p></blockquote><ul><li>例如：<code>&#39;wenbo&#39;.match(/(?&lt;=wen)bo/)</code></li><li>输出：<code>[ &#39;bo&#39;, index: 3, input: &#39;wenbo&#39;, groups: undefined ]</code></li><li>例如：<code>&#39;yubo&#39;.match(/(?&lt;=wen)bo/)</code></li><li>输出：null</li></ul><h3 id="x-y-字符-1" tabindex="-1"><a class="header-anchor" href="#x-y-字符-1"><span><code>x(?!y)</code>字符</span></a></h3><blockquote><p>匹配&gt; <code>x</code>，仅仅当&gt; <code>x</code>后面不是&gt; <code>y</code>时，&gt; 正向否定查找</p></blockquote><h3 id="y-x字符-1" tabindex="-1"><a class="header-anchor" href="#y-x字符-1"><span><code>(?&lt;=y)x</code>字符</span></a></h3><blockquote><p>匹配&gt; <code>x</code>，仅仅当&gt; <code>x</code>前面不是&gt; <code>y</code>&gt; ，反向否定查找</p></blockquote><h3 id="x-y字符" tabindex="-1"><a class="header-anchor" href="#x-y字符"><span><code>x|y</code>字符</span></a></h3><blockquote><p>匹配&gt; <code>x</code>或者&gt; <code>y</code> 可以连用</p></blockquote><ul><li>例如：<code>&#39;wenyu&#39;.match(/w|e|n/g)</code></li><li>输出：<code>[ &#39;w&#39;, &#39;e&#39;, &#39;n&#39; ]</code></li></ul><h3 id="n-字符" tabindex="-1"><a class="header-anchor" href="#n-字符"><span><code>{n}</code>字符</span></a></h3><blockquote><p>匹配前面一个字符刚好出现&gt; <code>n</code>次，&gt; <code>n</code>&gt; 是一个正整数</p></blockquote><ul><li>例如：<code>&#39;hello&#39;.match(/l{2}/g)</code></li><li>输出：<code>[ &#39;ll&#39; ]</code></li></ul><h3 id="n-字符-1" tabindex="-1"><a class="header-anchor" href="#n-字符-1"><span><code>{n,}</code>字符</span></a></h3><blockquote><p>匹配一个字符至少出现了&gt; <code>n</code>次，&gt; <code>n</code>&gt; 是一个正整数</p></blockquote><h3 id="n-m-字符" tabindex="-1"><a class="header-anchor" href="#n-m-字符"><span><code>{n,m}</code>字符</span></a></h3><blockquote><p>匹配前面的字符至少&gt; <code>n</code>&gt; 次最多&gt; <code>m</code>&gt; 次，&gt; <code>n</code>&gt; ，&gt; <code>m</code>是&gt; 为正整数&gt;</p></blockquote><h3 id="xyz-字符" tabindex="-1"><a class="header-anchor" href="#xyz-字符"><span><code>[xyz]</code>字符</span></a></h3><blockquote><p>字符集合&gt; 匹配方括号中的任意字符，包括转义字符，可以使用破折号(-)制定一个字符，&gt; 例如：&gt; <code>[a-zA-Z1-9]</code>&gt;</p></blockquote><ul><li>例如：<code>&#39;hello 123&#39;.match(/[a-h1-2]/g)</code></li><li>输出：<code>[ &#39;h&#39;, &#39;e&#39;, &#39;1&#39;, &#39;2&#39; ]</code></li></ul><h3 id="xyz-字符-1" tabindex="-1"><a class="header-anchor" href="#xyz-字符-1"><span><code>[^xyz]</code>字符</span></a></h3><blockquote><p>反向字符集，&gt; 匹配任何没有包含再方括号中的字符</p></blockquote><ul><li>例如：<code>&#39;hello 123&#39;.match(/[^a-h1-2]/g)</code></li><li>输出：<code>[ &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;3&#39; ]</code></li></ul><h3 id="b-字符" tabindex="-1"><a class="header-anchor" href="#b-字符"><span><code>[\\b]</code>字符</span></a></h3><blockquote><p>匹配一个退格(U+0008)，不是&gt; <code>\\b</code>，不要弄混了</p></blockquote><h3 id="b字符" tabindex="-1"><a class="header-anchor" href="#b字符"><span><code>\\b</code>字符</span></a></h3><blockquote><p>匹配一个词的边界</p></blockquote><p>例如：</p><ul><li><code>/\\bworld/.test(&#39;hello world&#39;) // true</code></li><li><code>/\\bworld/.test(&#39;hello-world&#39;) // true</code></li><li><code>/\\bworld/.test(&#39;helloworld&#39;) // false</code></li></ul><h3 id="b字符-1" tabindex="-1"><a class="header-anchor" href="#b字符-1"><span><code>\\B</code>字符</span></a></h3><blockquote><p>匹配一个非单词边界</p></blockquote><p>例如：</p><ul><li><code>/\\bworld/.test(&#39;hello world&#39;) // false</code></li><li><code>/\\bworld/.test(&#39;hello-world&#39;) // false</code></li><li><code>/\\bworld/.test(&#39;helloworld&#39;) // true</code></li></ul><h3 id="cx字符" tabindex="-1"><a class="header-anchor" href="#cx字符"><span><code>\\cX</code>字符</span></a></h3><blockquote><p>当 X 是出于 A 到 Z 之间字符的时候，匹配字符串中的一个控制符</p></blockquote><h3 id="d字符" tabindex="-1"><a class="header-anchor" href="#d字符"><span><code>\\d</code>字符</span></a></h3><blockquote><p>匹配一个数字，等价于&gt; <code>[0-9]</code></p></blockquote><h3 id="d字符-1" tabindex="-1"><a class="header-anchor" href="#d字符-1"><span><code>\\D</code>字符</span></a></h3><blockquote><p>匹配一个数字，等价于&gt; <code>[^0-9]</code></p></blockquote><h3 id="d字符-2" tabindex="-1"><a class="header-anchor" href="#d字符-2"><span><code>\\D</code>字符</span></a></h3><blockquote><p>匹配一个数字，等价于&gt; <code>[^0-9]</code></p></blockquote><h3 id="f字符" tabindex="-1"><a class="header-anchor" href="#f字符"><span><code>\\f</code>字符</span></a></h3><blockquote><p>匹配一个换页符(U+000C)</p></blockquote><h3 id="n字符" tabindex="-1"><a class="header-anchor" href="#n字符"><span><code>\\n</code>字符</span></a></h3><blockquote><p>匹配一个换行符(U+000A)</p></blockquote><h3 id="r字符" tabindex="-1"><a class="header-anchor" href="#r字符"><span><code>\\r</code>字符</span></a></h3><blockquote><p>匹配一个回车符</p></blockquote><h3 id="s字符" tabindex="-1"><a class="header-anchor" href="#s字符"><span><code>\\s</code>字符</span></a></h3><blockquote><p>匹配一个空白字符，包括空格，制表符，换页符，和换行符</p><p><code>[\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code></p></blockquote><h3 id="s字符-1" tabindex="-1"><a class="header-anchor" href="#s字符-1"><span><code>\\S</code>字符</span></a></h3><blockquote><p>匹配一个非空白字符</p></blockquote><h3 id="t字符" tabindex="-1"><a class="header-anchor" href="#t字符"><span><code>\\t</code>字符</span></a></h3><blockquote><p>匹配一个水平制表符</p></blockquote><h3 id="v字符" tabindex="-1"><a class="header-anchor" href="#v字符"><span><code>\\v</code>字符</span></a></h3><blockquote><p>匹配一个垂直制表符</p></blockquote><h3 id="w字符" tabindex="-1"><a class="header-anchor" href="#w字符"><span><code>\\w</code>字符</span></a></h3><blockquote><p>匹配一个单字字符（字母，数字或者下划线）&gt; ，等价于&gt; <code>[A-Za-z0-9_]</code></p></blockquote><h3 id="w字符-1" tabindex="-1"><a class="header-anchor" href="#w字符-1"><span><code>\\w</code>字符</span></a></h3><blockquote><p>匹配一个非单字字符&gt; ，等价于&gt; <code>[A-Za-z0-9_]</code></p></blockquote><h3 id="w字符-2" tabindex="-1"><a class="header-anchor" href="#w字符-2"><span><code>\\W</code>字符</span></a></h3><blockquote><p>匹配一个非单字字符</p></blockquote><h3 id="n字符-1" tabindex="-1"><a class="header-anchor" href="#n字符-1"><span><code>\\n</code>字符</span></a></h3><blockquote><p>返回最后的第 n 个字捕获匹配的子字符，&gt; 捕获的数目以左括号计算</p></blockquote><h3 id="_0字符" tabindex="-1"><a class="header-anchor" href="#_0字符"><span><code>\\0</code>字符</span></a></h3><blockquote><p>匹配 NULL 字符（U+0000）</p></blockquote><h3 id="xhh字符" tabindex="-1"><a class="header-anchor" href="#xhh字符"><span><code>\\xhh</code>字符</span></a></h3><blockquote><p>匹配一个两位十六进制数表示的字符（\\x00-\\xFF）</p></blockquote><h3 id="uhhhh字符" tabindex="-1"><a class="header-anchor" href="#uhhhh字符"><span><code>\\uhhhh</code>字符</span></a></h3><blockquote><p>匹配一个四位十六进制数表示的 UTF-16 代码单元</p></blockquote><h3 id="u-hhhhh-字符或-u-hhhh" tabindex="-1"><a class="header-anchor" href="#u-hhhhh-字符或-u-hhhh"><span><code>\\u{hhhhh}</code>字符或<code>\\u{hhhh}</code></span></a></h3><blockquote><p>（仅当设置了 U 标志时）匹配一个十六进制时候表示的 Unicode 字符</p></blockquote>`,179)]))}const p=i(n,[["render",h],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/JavaScript/yclbjiod/","title":"JavaScript-正则表达式","lang":"zh-CN","frontmatter":{"title":"JavaScript-正则表达式","author":"WIKIDOC","createTime":"2024/05/11 15:05:45","permalink":"/JavaScript/yclbjiod/","description":"正则表达式 正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象。这些模式被用于RegExp的 exec和 text方法，以及String中的 match、matchAll、replace、search和split方法 创建表达式 字面量 使用两个 / 直接创建正则表达，已斜杠表示开始和结束 当脚本加载后，正则表...","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"],["meta",{"property":"og:url","content":"https://www.xxx.cn/wikidoc/JavaScript/yclbjiod/"}],["meta",{"property":"og:site_name","content":"WIKIDOC"}],["meta",{"property":"og:title","content":"JavaScript-正则表达式"}],["meta",{"property":"og:description","content":"正则表达式 正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象。这些模式被用于RegExp的 exec和 text方法，以及String中的 match、matchAll、replace、search和split方法 创建表达式 字面量 使用两个 / 直接创建正则表达，已斜杠表示开始和结束 当脚本加载后，正则表..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T06:08:33.000Z"}],["meta",{"property":"article:author","content":"WIKIDOC"}],["meta",{"property":"article:modified_time","content":"2024-09-11T06:08:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript-正则表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-11T06:08:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WIKIDOC\\"}]}"]]},"headers":[{"level":2,"title":"正则表达式","slug":"正则表达式","link":"#正则表达式","children":[]},{"level":2,"title":"创建表达式","slug":"创建表达式","link":"#创建表达式","children":[]},{"level":2,"title":"实例属性","slug":"实例属性","link":"#实例属性","children":[]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"正则实例方法","slug":"正则实例方法","link":"#正则实例方法","children":[]},{"level":3,"title":"String 实例方法","slug":"string-实例方法","link":"#string-实例方法","children":[]}]},{"level":2,"title":"修饰符（标志符）","slug":"修饰符-标志符","link":"#修饰符-标志符","children":[{"level":3,"title":"g修饰符","slug":"g修饰符","link":"#g修饰符","children":[]},{"level":3,"title":"i修饰符","slug":"i修饰符","link":"#i修饰符","children":[]},{"level":3,"title":"m修饰符","slug":"m修饰符","link":"#m修饰符","children":[]},{"level":3,"title":"s修饰符","slug":"s修饰符","link":"#s修饰符","children":[]},{"level":3,"title":"u修饰符","slug":"u修饰符","link":"#u修饰符","children":[]},{"level":3,"title":"y修饰符","slug":"y修饰符","link":"#y修饰符","children":[]}]},{"level":2,"title":"特殊字符","slug":"特殊字符","link":"#特殊字符","children":[{"level":3,"title":"\\\\字符","slug":"字符","link":"#字符","children":[]},{"level":3,"title":"^字符","slug":"字符-1","link":"#字符-1","children":[]},{"level":3,"title":"$字符","slug":"字符-2","link":"#字符-2","children":[]},{"level":3,"title":"*字符","slug":"字符-3","link":"#字符-3","children":[]},{"level":3,"title":"+字符","slug":"字符-4","link":"#字符-4","children":[]},{"level":3,"title":"?字符","slug":"字符-5","link":"#字符-5","children":[]},{"level":3,"title":".字符","slug":"字符-6","link":"#字符-6","children":[]},{"level":3,"title":"(x)字符","slug":"x-字符","link":"#x-字符","children":[]},{"level":3,"title":"(?=x)字符","slug":"x-字符-1","link":"#x-字符-1","children":[]},{"level":3,"title":"x(?=y)字符","slug":"x-y-字符","link":"#x-y-字符","children":[]},{"level":3,"title":"(?<=y)x字符","slug":"y-x字符","link":"#y-x字符","children":[]},{"level":3,"title":"x(?!y)字符","slug":"x-y-字符-1","link":"#x-y-字符-1","children":[]},{"level":3,"title":"(?<=y)x字符","slug":"y-x字符-1","link":"#y-x字符-1","children":[]},{"level":3,"title":"x|y字符","slug":"x-y字符","link":"#x-y字符","children":[]},{"level":3,"title":"{n}字符","slug":"n-字符","link":"#n-字符","children":[]},{"level":3,"title":"{n,}字符","slug":"n-字符-1","link":"#n-字符-1","children":[]},{"level":3,"title":"{n,m}字符","slug":"n-m-字符","link":"#n-m-字符","children":[]},{"level":3,"title":"[xyz]字符","slug":"xyz-字符","link":"#xyz-字符","children":[]},{"level":3,"title":"[^xyz]字符","slug":"xyz-字符-1","link":"#xyz-字符-1","children":[]},{"level":3,"title":"[\\\\b]字符","slug":"b-字符","link":"#b-字符","children":[]},{"level":3,"title":"\\\\b字符","slug":"b字符","link":"#b字符","children":[]},{"level":3,"title":"\\\\B字符","slug":"b字符-1","link":"#b字符-1","children":[]},{"level":3,"title":"\\\\cX字符","slug":"cx字符","link":"#cx字符","children":[]},{"level":3,"title":"\\\\d字符","slug":"d字符","link":"#d字符","children":[]},{"level":3,"title":"\\\\D字符","slug":"d字符-1","link":"#d字符-1","children":[]},{"level":3,"title":"\\\\D字符","slug":"d字符-2","link":"#d字符-2","children":[]},{"level":3,"title":"\\\\f字符","slug":"f字符","link":"#f字符","children":[]},{"level":3,"title":"\\\\n字符","slug":"n字符","link":"#n字符","children":[]},{"level":3,"title":"\\\\r字符","slug":"r字符","link":"#r字符","children":[]},{"level":3,"title":"\\\\s字符","slug":"s字符","link":"#s字符","children":[]},{"level":3,"title":"\\\\S字符","slug":"s字符-1","link":"#s字符-1","children":[]},{"level":3,"title":"\\\\t字符","slug":"t字符","link":"#t字符","children":[]},{"level":3,"title":"\\\\v字符","slug":"v字符","link":"#v字符","children":[]},{"level":3,"title":"\\\\w字符","slug":"w字符","link":"#w字符","children":[]},{"level":3,"title":"\\\\w字符","slug":"w字符-1","link":"#w字符-1","children":[]},{"level":3,"title":"\\\\W字符","slug":"w字符-2","link":"#w字符-2","children":[]},{"level":3,"title":"\\\\n字符","slug":"n字符-1","link":"#n字符-1","children":[]},{"level":3,"title":"\\\\0字符","slug":"_0字符","link":"#_0字符","children":[]},{"level":3,"title":"\\\\xhh字符","slug":"xhh字符","link":"#xhh字符","children":[]},{"level":3,"title":"\\\\uhhhh字符","slug":"uhhhh字符","link":"#uhhhh字符","children":[]},{"level":3,"title":"\\\\u{hhhhh}字符或\\\\u{hhhh}","slug":"u-hhhhh-字符或-u-hhhh","link":"#u-hhhhh-字符或-u-hhhh","children":[]}]}],"readingTime":{"minutes":10.73,"words":3219},"git":{"createdTime":1726034913000,"updatedTime":1726034913000,"contributors":[{"name":"hardy","email":"WikiFX@DESKTOP-Q1VUAS6","commits":1}]},"autoDesc":true,"filePathRelative":"notes/JavaScript/JavaScript-正则表达式.md"}`);export{p as comp,d as data};
