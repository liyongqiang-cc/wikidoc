import{_ as i,c as a,a as n,o as l}from"./app-Dk8eA5Ei.js";const e={};function t(h,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>IOC（Inversion of Control，控制反转）是一种设计原则，用于减少代码之间的耦合，在传统的编码格式中，对象的创建和管理通常由调用者负责。而在 IOC 模式中，这些职责被反转，对象的创建和管理由一个外部的容器（通常称为 IOC 容器）来负责。</p><p>IOC 的核心思想是将对象的依赖关系从代码中移除，改为由容器来管理。这样，代码只需要关心如何使用对象，而不需要关心对象是如何创建和销毁的。</p><h2 id="ioc的核心思想" tabindex="-1"><a class="header-anchor" href="#ioc的核心思想"><span>IOC的核心思想</span></a></h2><ol><li><strong>依赖注入（Dependency Injection, DI）</strong> ：这是 IOC 的一种实现方式。通过依赖注入，对象的依赖关系由外部容器在运行时注入，而不是在对象内部硬编码。依赖注入有三种主要方式： <ul><li>构造函数注入：通过构造函数传递依赖对象。</li><li>属性注入：通过属性设置依赖对象。</li><li>方法注入：通过方法参数传递依赖对象。</li></ul></li><li><strong>容器</strong> ：IOC 容器负责管理对象的生命周期和依赖关系。容器通常提供注册、解析和销毁对象的功能。常见的 IOC 容器有 .NET 的 <code>Microsoft.Extensions.DependencyInjection</code>、Spring 的 <code>ApplicationContext</code> 等。</li><li><strong>配置</strong> ：通常通过配置文件或代码配置来定义对象的依赖关系和生命周期。配置可以包括： <ul><li>注册类型：将接口和实现类注册到容器中。</li><li>生命周期管理：定义对象的生命周期（如单例、瞬态、作用域等）。</li></ul></li></ol><h2 id="ioc-的运用场景" tabindex="-1"><a class="header-anchor" href="#ioc-的运用场景"><span>IOC 的运用场景</span></a></h2><ol><li><strong>解耦</strong> ：减少代码之间的耦合，提高代码的可维护性和可测试性。</li><li><strong>模块化</strong> ：通过依赖注入，模块之间可以更加独立，便于模块的替换和扩展。</li><li><strong>测试</strong> ：在单元测试中，可以方便地替换依赖对象，进行隔离测试。</li></ol><h3 id="手写一个简单的-ioc-容器" tabindex="-1"><a class="header-anchor" href="#手写一个简单的-ioc-容器"><span>手写一个简单的 IOC 容器</span></a></h3><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">using</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">using</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> System.Collections.Generic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">//</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 定义</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> IOC</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 容器接口</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">public</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> interface</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> IContainer</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    void</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Register</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">TInterface,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TImplementatio</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;()</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> where</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TImplementation</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> :</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TInterface</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    TInterface</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Resolve</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">TInterfac</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">//</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 实现简单的</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> IOC</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 容器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">public</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> class</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> SimpleContainer</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> :</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> IContainer</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    //</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 存储接口和实现类之间的映射关系</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    private</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> readonly</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Dictionary</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Type,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Typ</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> _typeMappings</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Dictionary</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Type,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Typ</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    //</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 注册接口和实现类</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    public</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> void</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Register</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">TInterface,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TImplementatio</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;()</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> where</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TImplementation</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> :</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TInterface</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        _typeMappings[typeof(TInterface</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)] = typeof(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TImplementation</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    //</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 解析接口并返回实现类的实例</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    public</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TInterface</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Resolve</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">TInterfac</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        Type</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> implementationType</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> _typeMappings[typeof</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TInterface</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (TInterface)Activator.CreateInstance(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">implementationType</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">//</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 示例接口和实现类</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">public</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> interface</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> IService</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    void</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Execute</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">public</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> class</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ServiceImplementation</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> :</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> IService</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    public</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> void</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Execute</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        Console.WriteLine(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;Service is executing...&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">//</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 使用示例</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">public</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> class</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Program</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    public</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> static</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> void</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        //</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 创建容器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        IContainer</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> container</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> SimpleContainer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        //</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 注册依赖</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        container.Register</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;IService, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ServiceImplementatio</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        //</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 解析并使用依赖</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        IService</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> service</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> container.Resolve</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">IServic</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        service.Execute</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码解释</p><ul><li>IContainer 接口：定义了容器的两个基本操作：注册和解析。</li><li>SimpleContainer 类：实现了 IContainer 接口，使用字典来存储接口和实现类之间的映射关系。</li><li>Register 方法：将接口和实现类注册到容器中。</li><li>Resolve 方法：根据接口类型解析出对应的实现类实例。</li><li>示例接口和实现类：定义了一个简单的接口和实现类，用于演示 IOC 容器的使用。</li><li>Main 方法：创建容器实例，注册依赖关系，并解析和使用依赖。</li></ul><p>通过这个简单的示例，你可以看到 IOC 容器是如何管理对象的创建和依赖关系的。实际的 IOC 容器（如 .NET 的 Microsoft.Extensions.DependencyInjection）会更加复杂和强大，但基本的原理是相似的。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>IOC 通过将对象的创建和管理职责从调用者中移除，降低了代码之间的耦合度，提高了代码的可维护性和可测试性。通过手写的简单 IOC 容器，你可以快速理解 IOC 的原理和运用场景。</p>`,14)]))}const k=i(e,[["render",t],["__file","index.html.vue"]]),r=JSON.parse(`{"path":"/Net/frabdfrdh/","title":"IOC（控制反转）","lang":"zh-CN","frontmatter":{"title":"IOC（控制反转）","author":"WIKIDOC","createTime":"2023/06/07 21:35:05","permalink":"/Net/frabdfrdh/","description":"概述 IOC（Inversion of Control，控制反转）是一种设计原则，用于减少代码之间的耦合，在传统的编码格式中，对象的创建和管理通常由调用者负责。而在 IOC 模式中，这些职责被反转，对象的创建和管理由一个外部的容器（通常称为 IOC 容器）来负责。 IOC 的核心思想是将对象的依赖关系从代码中移除，改为由容器来管理。这样，代码只需要关心...","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"],["meta",{"property":"og:url","content":"https://www.xxx.cn/wikidoc/Net/frabdfrdh/"}],["meta",{"property":"og:site_name","content":"WIKIDOC"}],["meta",{"property":"og:title","content":"IOC（控制反转）"}],["meta",{"property":"og:description","content":"概述 IOC（Inversion of Control，控制反转）是一种设计原则，用于减少代码之间的耦合，在传统的编码格式中，对象的创建和管理通常由调用者负责。而在 IOC 模式中，这些职责被反转，对象的创建和管理由一个外部的容器（通常称为 IOC 容器）来负责。 IOC 的核心思想是将对象的依赖关系从代码中移除，改为由容器来管理。这样，代码只需要关心..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-13T10:40:50.000Z"}],["meta",{"property":"article:author","content":"WIKIDOC"}],["meta",{"property":"article:modified_time","content":"2024-09-13T10:40:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IOC（控制反转）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-13T10:40:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WIKIDOC\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"IOC的核心思想","slug":"ioc的核心思想","link":"#ioc的核心思想","children":[]},{"level":2,"title":"IOC 的运用场景","slug":"ioc-的运用场景","link":"#ioc-的运用场景","children":[{"level":3,"title":"手写一个简单的 IOC 容器","slug":"手写一个简单的-ioc-容器","link":"#手写一个简单的-ioc-容器","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"readingTime":{"minutes":3.27,"words":981},"git":{"createdTime":1726224050000,"updatedTime":1726224050000,"contributors":[{"name":"hardy","email":"WikiFX@DESKTOP-Q1VUAS6","commits":1}]},"autoDesc":true,"filePathRelative":"notes/Net/IOC.md"}`);export{k as comp,r as data};
